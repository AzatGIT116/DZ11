# 1. Создать класс TrafficLight (светофор):
# ● определить у него один атрибут color (цвет) и метод running (запуск);
# ● атрибут реализовать как приватный;
# ● в рамках метода реализовать переключение светофора в режимы: красный, жёлтый,
# зелёный;
# ● продолжительность первого состояния (красный) составляет 7 секунд, второго
# (жёлтый) — 2 секунды, третьего (зелёный) — на ваше усмотрение;
# ● переключение между режимами должно осуществляться только в указанном порядке
# (красный, жёлтый, зелёный);
# ● проверить работу примера, создав экземпляр и вызвав описанный метод.
# Задачу можно усложнить, реализовав проверку порядка режимов. При его нарушении
# выводить соответствующее сообщение и завершать скрипт.


from time import sleep
from datetime import datetime as dt


class TrafficLight:
    """ Класс светофора, реализующий свое переключение при запуске running( """
    _states = {'красный': 7, 'жёлтый': 2, 'зеленый': 4}
    _color = ''

    def running(self):
        """ Метод запусключения светофора """
        for color, sw_time in self._states.items():
            self._color = color
            start_state_time = dt.now()

            print (self._color)
                  

            sleep(sw_time)

            print(f"Светофор переключил {self._color} через " 
                  f"{(dt.now() - start_state_time).seconds} секунд")


if __name__ == '__main__':
    tl = TrafficLight()
    tl.running()


# 2. Реализовать класс Road (дорога), в котором определить атрибуты: length (длина), width (ширина).
# Значения данных атрибутов должны передаваться при создании экземпляра класса.
# Атрибуты сделать защищенными.
# Определить метод расчета массы асфальта, необходимого для покрытия всего дорожного полотна.
# Использовать формулу:длина*ширина*масса асфальта для покрытия одного кв метра дороги асфальтом, толщиной в 1 см*число см толщины полотна.
# Проверить работу метода.
# Например: 20м*5000м*25кг*5см = 12500 т


class Road:
    WEIGHT1M2 = 25  # кг/см - вес одного квадратного метра толщиной в 1 см

    def __init__(self, length, width):
        self._length = length
        self._width = width

    def weight(self, depth):
        return depth * self.WEIGHT1M2 * self._width * self._length


if __name__ == '__main__':
    road_Saratov_Piter = Road(5000, 20)
    print(road_Saratov_Piter.weight(5)/1000)
    print(road_Saratov_Piter._length)
    print(road_Saratov_Piter._width)